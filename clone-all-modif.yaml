---
- hosts: proxmox
  gather_facts: no
  vars_files:
    - vars.yaml
  tasks:
  - name: Clone VM Server with only source VM name - Linked Clone
    community.general.proxmox_kvm:
      api_user: "{{ api_user }}"
      api_password: "{{ api_password }}"
      api_host: "{{ api_host }}"
      clone: "{{ clone_name_srv }}" # The VM source
      name: "{{ new_srv_name }}"  # The target VM name
      node: "{{ node }}"
      full: no
  - name: Clone VM Client with only source VM name - Linked Clone
    community.general.proxmox_kvm:
      api_user: "{{ api_user }}"
      api_password: "{{ api_password }}"
      api_host: "{{ api_host }}"
      clone: "{{ clone_name_cli }}" # The VM source
      name: "{{ new_cli_name }}"  # The target VM name
      node: "{{ node }}"
      full: no
  - name: Clone VM Server App with only source VM name - Linked Clone
    community.general.proxmox_kvm:
      api_user: "{{ api_user }}"
      api_password: "{{ api_password }}"
      api_host: "{{ api_host }}"
      clone: "{{ clone_app_srv }}" # The VM source
      name: "{{ new_app_srv }}"  # The target VM name
      node: "{{ node }}"
      full: no
    when: srvapp_var is match("true")
  - name: Pause for 2 minutes to wait the VM Start
    ansible.builtin.pause:
      minutes: 5
  - name: Start VM Server
    community.general.proxmox_kvm:
      api_user: "{{ api_user }}"
      api_password: "{{ api_password }}"
      api_host    : "{{ api_host }}"
      name        : "{{ new_srv_name }}"
      node        : "{{ node }}"
      state       : started
  - name: Start VM Client
    community.general.proxmox_kvm:
      api_user: "{{ api_user }}"
      api_password: "{{ api_password }}"
      api_host    : "{{ api_host }}"
      name        : "{{ new_cli_name }}"
      node        : "{{ node }}"
      state       : started
  - name: Wait for Proxmox VMs to respond to SSH
    ansible.builtin.wait_for:
      host: "{{ item }}"
      port: 22
      delay: 30
      timeout: 500
      state: started
    retries: 30
    delay: 10
    delegate_to: localhost
    loop:
      - "{{ip_loop}}"
      - "{{ip_loop_2}}"
- hosts: wserver
  gather_facts: no
  vars_files:
    - vars.yaml
  tasks:
  - name: Change the hostname to DC1
    ansible.windows.win_hostname:
      name: "{{ dc_hostname }}"
  - name: Reboot the machine with all defaults
    ansible.windows.win_reboot:
  - name: Wait for Proxmox VMs to respond to SSH
    ansible.builtin.wait_for:
      host: "{{ item }}"
      port: 22
      delay: 10
      timeout: 500
      state: started
    retries: 30
    delay: 10
    delegate_to: localhost
    loop:
      - "{{ ip_loop }}"
  - name: Create Domain
    ansible.windows.win_domain: >
      dns_domain_name="{{ domain_name }}"
      safe_mode_password="{{ recovery_password }}"
  - name: Config DHCP with Powershell
    ansible.windows.win_powershell:
      script: |
        Add-DhcpServerv4Scope -name "MAS32" -StartRange 10.0.0.1 -EndRange 10.0.0.254 -SubnetMask 255.255.255.0 -State Active
        Add-DhcpServerv4ExclusionRange -ScopeID 10.0.0.0 -StartRange 10.0.0.1 -EndRange 10.0.0.15
        Set-DhcpServerv4OptionValue -OptionID 3 -Value 10.0.0.1 -ScopeID 10.0.0.0 -ComputerName SRV-DC1
        Set-DhcpServerv4OptionValue -DnsDomain pipo.miel -DnsServer 10.0.0.12
        Start-Sleep -Seconds 10
  - name: Reboot the machine with all defaults
    ansible.windows.win_reboot:

############################# PLAYBOOK 2 ##############################################################

---
- hosts: wserverdhcp
  gather_facts: no
  vars_files:
    - vars.yaml
  tasks:
  - name: Finish Config DHCP with Powershell
    ansible.windows.win_powershell:
      script: |
        $Username = 'pipo.miel\Administrateur'
        $Password = ConvertTo-SecureString 'Pa$$w0rd' -AsPlainText -Force
        $Credential = New-Object System.Management.Automation.PSCredential($Username, $Password)

        Invoke-Command -ComputerName SRV-DC1 -Credential $Credential -ScriptBlock {
            Add-DhcpServerInDC -DnsName SRV-DC1.pipo.miel -IPAddress 10.0.0.12
        }
  - name: Reboot the machine with all defaults
    ansible.windows.win_reboot:

#### EXECUTION : ansible-playbook -i inventory.cfg -i inventory2.cfg master.yaml

##############################################################################################
### INVENTORY FILES ##########################################################################
##############################################################################################

# inventory.cfg
[ansiblectrl]
10.0.0.11 ansible_user=cpnv

[proxmox]
10.0.0.10 ansible_user=root

[windows]
SRV-Template ansible_host=10.0.0.12
Cli-Template ansible_host=10.0.0.13

[wserver]
SRV-Template ansible_host=10.0.0.12

[wincli]
Cli-Template ansible_host=10.0.0.13

[windows:vars]
ansible_user=ansible
ansible_password=Passw0rd123
ansible_connection=ssh
ansible_shell_type=cmd

[wserver:vars]
ansible_user=ansible
ansible_password=Passw0rd123
ansible_connection=ssh
ansible_shell_type=cmd

[wincli:vars]
ansible_user=ansible
ansible_password=Passw0rd123
ansible_connection=ssh
ansible_shell_type=cmd

# inventory2.cfg
[wserverdhcp]
SRV-DC1 ansible_host=10.0.0.12

[wserverdhcp:vars]
ansible_user=pipo.miel\Administrateur
ansible_password=Pa$$w0rd
ansible_connection=ssh
ansible_shell_type=cmd
cpnv@Ansible:~$


########################### INVENTORY BACKUPS ###################################################################
#################################################################################################################
inventory.cfg VM

[ansiblectrl]
10.0.0.11 ansible_user=cpnv

[proxmox]
10.0.0.10 ansible_user=root

[windows]
SRV-Template ansible_host=10.0.0.12
Cli-Template ansible_host=10.0.0.13

[wserver]
SRV-Template ansible_host=10.0.0.12

[windows:vars]
ansible_user=ansible
ansible_password=Passw0rd123
ansible_connection=ssh
ansible_shell_type=cmd

#################################################################################################################

inventory.cfg physique

[ansiblectrl]
10.229.37.201 ansible_user=cpnv

[proxmox]
10.229.37.200 ansible_user=root

[windows]
SRV-Template ansible_host=10.229.37.202
Cli-Template ansible_host=10.229.37.203

[wserver]
SRV-Template ansible_host=10.229.37.202

[windows:vars]
ansible_user=ansible
ansible_password=Passw0rd123
ansible_connection=ssh
ansible_shell_type=cmd

##############################################################################################
### DEBUG & TESTS ############################################################################
##############################################################################################

# host should be a member of domain ansible.vagrant; module will ensure the hostname is mydomainclient
# and will use the passed credentials to join domain if necessary.
# Ansible connection should use local credentials if possible.
# If a reboot is required, the second task will trigger one and wait until the host is available.

---
- hosts: wincli
  gather_facts: false
  tasks:
  - ansible.windows.win_domain_membership:
      dns_domain_name: pipo.miel
      hostname: mydomainclient
      domain_admin_user: Administrateur@pipo.miel
      domain_admin_password: Pa$$w0rd
      domain_ou_path: "OU=Computers,DC=pipo,DC=miel"
      state: domain
    register: domain_state

  - ansible.windows.win_reboot:
    when: domain_state.reboot_required




  - name: Change the hostname to Cli1
    ansible.windows.win_hostname:
      name: Cli1
  - name: Reboot the machine with all defaults
    ansible.windows.win_reboot: